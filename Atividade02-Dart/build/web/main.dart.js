// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 2.19.2 (stable) (Tue Feb 7 18:37:17 2023 +0000) on "linux_x64"
// Module: zapp_user_main
// Flags: soundNullSafety(true), enableAsserts(true)
define('zapp_user_main', ['dart_sdk'], (function load__zapp_user_main(dart_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const js = dart_sdk.js;
  const ui = dart_sdk.ui;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  var $46zapp_entry = Object.create(dart.library);
  var main = Object.create(dart.library);
  var web_plugin_registrant = Object.create(dart.library);
  var banking = Object.create(dart.library);
  var $toString = dartx.toString;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T = {
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    ListOfString: () => (T.ListOfString = dart.constFn(core.List$(core.String)))(),
    ListOfStringTodynamic: () => (T.ListOfStringTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T.ListOfString()])))(),
    JSArrayOfString: () => (T.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    dynamicToNull: () => (T.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    VoidToNull: () => (T.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    ObjectAndStackTraceTovoid: () => (T.ObjectAndStackTraceTovoid = dart.constFn(dart.fnType(dart.void, [core.Object, core.StackTrace])))(),
    ZoneAndZoneDelegateAndZone__Tovoid: () => (T.ZoneAndZoneDelegateAndZone__Tovoid = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.String])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(main.main, T.VoidTovoid());
    }
  }, false);
  var C = [void 0];
  var I = ["file:///zapp/project/lib/banking.dart"];
  $46zapp_entry.runAppGuarded = function runAppGuarded() {
    async.runZonedGuarded(core.Null, dart.fn(() => {
      if (T.ListOfStringTodynamic().is(C[0] || CT.C0)) {
        T.ListOfStringTodynamic().as(C[0] || CT.C0)(T.JSArrayOfString().of([]));
      } else {
        (C[0] || CT.C0)();
      }
      if (js.context.hasProperty("__notifyFlutterRendered")) {
        async.Future.delayed(new core.Duration.new({milliseconds: 250})).then(core.Null, dart.fn(_ => {
          js.context.callMethod("__notifyFlutterRendered", [false]);
        }, T.dynamicToNull()));
      }
    }, T.VoidToNull()), dart.fn((e, stackTrace) => {
      if (js.context.hasProperty("zappHandlerUserError")) {
        js.context.callMethod("zappHandlerUserError", [e[$toString](), stackTrace.toString()]);
      }
    }, T.ObjectAndStackTraceTovoid()), {zoneSpecification: new async._ZoneSpecification.new({print: dart.fn((self, parent, zone, line) => {
          if (js.context.hasProperty("zappHandlerUserPrint")) {
            js.context.callMethod("zappHandlerUserPrint", [line]);
          }
        }, T.ZoneAndZoneDelegateAndZone__Tovoid())})});
  };
  $46zapp_entry.main = function main$() {
    return async.async(dart.void, function* main() {
      yield ui.webOnlyWarmupEngine({runApp: dart.fn(() => {
          $46zapp_entry.runAppGuarded();
        }, T.VoidToNull()), registerPlugins: dart.fn(() => {
          web_plugin_registrant.registerPlugins();
        }, T.VoidToNull())});
    });
  };
  main.main = function main$0() {
    let contaCorrente = new banking.ContaCorrente.new("Conta Corrente", 100);
    core.print("Saldo Inicial da Conta Corrente: " + dart.str(contaCorrente.saldo));
    contaCorrente.depositar(50);
    core.print("Após Depósito: " + dart.str(contaCorrente.saldo));
    contaCorrente.sacar(30);
    core.print("Após Saque: " + dart.str(contaCorrente.saldo));
    let contaPoupanca = new banking.ContaPoupanca.new("Conta Poupança", 100);
    core.print("Saldo Inicial da Conta Poupança: " + dart.str(contaPoupanca.saldo));
    contaPoupanca.depositar(50);
    core.print("Após Depósito: " + dart.str(contaPoupanca.saldo));
    contaPoupanca.sacar(30);
    core.print("Após Saque: " + dart.str(contaPoupanca.saldo));
  };
  web_plugin_registrant.registerPlugins = function registerPlugins() {
  };
  var nomeConta$ = dart.privateName(banking, "Conta.nomeConta");
  var saldo$ = dart.privateName(banking, "Conta.saldo");
  var _adicionar = dart.privateName(banking, "_adicionar");
  var _subtrair = dart.privateName(banking, "_subtrair");
  const _is_Conta_default = Symbol('_is_Conta_default');
  banking.Conta$ = dart.generic(T => {
    class Conta extends core.Object {
      get nomeConta() {
        return this[nomeConta$];
      }
      set nomeConta(value) {
        this[nomeConta$] = value;
      }
      get saldo() {
        return this[saldo$];
      }
      set saldo(value) {
        this[saldo$] = T.as(value);
      }
      depositar(valor) {
        T.as(valor);
        this.saldo = this[_adicionar](this.saldo, valor);
      }
      sacar(valor) {
        T.as(valor);
        this.saldo = this[_subtrair](this.saldo, valor);
      }
    }
    (Conta.new = function(nomeConta, saldo) {
      this[nomeConta$] = nomeConta;
      this[saldo$] = saldo;
      ;
    }).prototype = Conta.prototype;
    dart.addTypeTests(Conta);
    Conta.prototype[_is_Conta_default] = true;
    dart.addTypeCaches(Conta);
    dart.setMethodSignature(Conta, () => ({
      __proto__: dart.getMethods(Conta.__proto__),
      depositar: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      sacar: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(Conta, I[0]);
    dart.setFieldSignature(Conta, () => ({
      __proto__: dart.getFields(Conta.__proto__),
      nomeConta: dart.fieldType(core.String),
      saldo: dart.fieldType(T)
    }));
    return Conta;
  });
  banking.Conta = banking.Conta$();
  dart.addTypeTests(banking.Conta, _is_Conta_default);
  banking.ContaCorrente = class ContaCorrente extends banking.Conta$(core.double) {
    static ['_#new#tearOff'](nomeConta, saldo) {
      return new banking.ContaCorrente.new(nomeConta, saldo);
    }
    [_adicionar](a, b) {
      return a + b;
    }
    [_subtrair](a, b) {
      return a - b;
    }
  };
  (banking.ContaCorrente.new = function(nomeConta, saldo) {
    banking.ContaCorrente.__proto__.new.call(this, nomeConta, saldo);
    ;
  }).prototype = banking.ContaCorrente.prototype;
  dart.addTypeTests(banking.ContaCorrente);
  dart.addTypeCaches(banking.ContaCorrente);
  dart.setMethodSignature(banking.ContaCorrente, () => ({
    __proto__: dart.getMethods(banking.ContaCorrente.__proto__),
    [_adicionar]: dart.fnType(core.double, [core.double, core.double]),
    [_subtrair]: dart.fnType(core.double, [core.double, core.double])
  }));
  dart.setLibraryUri(banking.ContaCorrente, I[0]);
  banking.ContaPoupanca = class ContaPoupanca extends banking.Conta$(core.int) {
    static ['_#new#tearOff'](nomeConta, saldo) {
      return new banking.ContaPoupanca.new(nomeConta, saldo);
    }
    [_adicionar](a, b) {
      return a + b;
    }
    [_subtrair](a, b) {
      return a - b;
    }
  };
  (banking.ContaPoupanca.new = function(nomeConta, saldo) {
    banking.ContaPoupanca.__proto__.new.call(this, nomeConta, saldo);
    ;
  }).prototype = banking.ContaPoupanca.prototype;
  dart.addTypeTests(banking.ContaPoupanca);
  dart.addTypeCaches(banking.ContaPoupanca);
  dart.setMethodSignature(banking.ContaPoupanca, () => ({
    __proto__: dart.getMethods(banking.ContaPoupanca.__proto__),
    [_adicionar]: dart.fnType(core.int, [core.int, core.int]),
    [_subtrair]: dart.fnType(core.int, [core.int, core.int])
  }));
  dart.setLibraryUri(banking.ContaPoupanca, I[0]);
  dart.trackLibraries("zapp_user_main", {
    "file:///zapp/project/.zapp_entry.dart": $46zapp_entry,
    "file:///zapp/project/lib/main.dart": main,
    "file:///zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart": web_plugin_registrant,
    "file:///zapp/project/lib/banking.dart": banking
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["/zapp/project/.zapp_entry.dart","/zapp/project/lib/main.dart","/zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart","/zapp/project/lib/banking.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CI,IA1BF,iCAAgB;AACd,UAAoB,6BAGD;AAF8B,QAA9B,AAAkB,6BAElB,eAF2B;;AAEL,QAAF,CAApB;;AAEnB,UAAO,AAAQ,uBAAY;AAKvB,QAJK,AAAqC,qBAA7B,qCAAuB,uBAAW,QAAC;AAG9C,UAFC,AAAQ,sBAAW,2BAA2B,CAC/C;;;wBAIL,SAAC,GAAG;AACL,UAAO,AAAQ,uBAAY;AAIvB,QAHC,AAAQ,sBAAW,wBAAwB,CAC5C,AAAE,CAAD,eACD,AAAW,UAAD;;2DAGM,yCACb,SAAC,MAAM,QAAQ,MAAM;AAC1B,cAAO,AAAQ,uBAAY;AAC4B,YAAlD,AAAQ,sBAAW,wBAAwB,CAAC,IAAI;;;EAI3D;;AAEiB;AAQd,MAPD,MAAS,gCACC;AACS,UAAf;6CAEe;AACmB,UAAjB;;IAGvB;;;ACpDQ,wBAAgB,8BAAc,kBAAkB;AACU,IAAhE,WAAM,AAAyD,+CAArB,AAAc,aAAD;AAE1B,IAA7B,AAAc,aAAD,WAAW;AACsB,IAA9C,WAAM,AAAuC,6BAArB,AAAc,aAAD;AAEZ,IAAzB,AAAc,aAAD,OAAO;AACuB,IAA3C,WAAM,AAAoC,0BAArB,AAAc,aAAD;AAE5B,wBAAgB,8BAAc,kBAAkB;AACU,IAAhE,WAAM,AAAyD,+CAArB,AAAc,aAAD;AAE5B,IAA3B,AAAc,aAAD,WAAW;AACsB,IAA9C,WAAM,AAAuC,6BAArB,AAAc,aAAD;AAEd,IAAvB,AAAc,aAAD,OAAO;AACuB,IAA3C,WAAM,AAAoC,0BAArB,AAAc,aAAD;EACpC;;ECbwB;;;;;;;;MCNf;;;;;;MACL;;;;;;gBAIe;;AACiB,QAAhC,aAAQ,iBAAW,YAAO,KAAK;MACjC;YAEa;;AACoB,QAA/B,aAAQ,gBAAU,YAAO,KAAK;MAChC;;0BARW,WAAgB;MAAhB;MAAgB;;IAAM;;;;;;;;;;;;;;;;;;;;;;;iBAkBR,GAAU;AAAM,YAAA,AAAE,EAAD,GAAG,CAAC;;gBAGtB,GAAU;AAAM,YAAA,AAAE,EAAD,GAAG,CAAC;;;wCANxB,WAAkB;AAAS,mDAAM,SAAS,EAAE,KAAK;;EAAC;;;;;;;;;;;;;iBAapD,GAAO;AAAM,YAAA,AAAE,EAAD,GAAG,CAAC;;gBAGnB,GAAO;AAAM,YAAA,AAAE,EAAD,GAAG,CAAC;;;wCANf,WAAe;AAAS,mDAAM,SAAS,EAAE,KAAK;;EAAC","file":"main.js"}');
  // Exports:
  return {
    zapp__project__$46zapp_entry: $46zapp_entry,
    zapp__project__lib__main: main,
    zapp__project__$46dart_tool__dartpad__web_plugin_registrant: web_plugin_registrant,
    zapp__project__lib__banking: banking
  };
}));

//# sourceMappingURL=main.js.map
